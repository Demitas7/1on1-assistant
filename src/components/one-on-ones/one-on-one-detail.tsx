'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { CalendarIcon, SparklesIcon, LoaderIcon } from 'lucide-react'

interface OneOnOne {
  id: number
  date: string
  content: string
  nextActions: string | null
  aiSummary: string | null
  aiInsights: string | null
  createdAt: string
  member: {
    id: number
    name: string
    jobTitle: string
  }
}

interface Props {
  id: string
}

export function OneOnOneDetail({ id }: Props) {
  const router = useRouter()
  const [oneOnOne, setOneOnOne] = useState<OneOnOne | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [aiLoading, setAiLoading] = useState(false)
  const [aiError, setAiError] = useState<string | null>(null)

  useEffect(() => {
    fetchOneOnOne()
  }, [id])

  const fetchOneOnOne = async () => {
    try {
      const response = await fetch(`/api/one-on-ones/${id}`)
      if (!response.ok) {
        throw new Error('1on1記録の取得に失敗しました')
      }
      const data = await response.json()
      setOneOnOne(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'エラーが発生しました')
    } finally {
      setIsLoading(false)
    }
  }

  const handleDelete = async () => {
    if (!confirm('この1on1記録を削除してもよろしいですか？')) {
      return
    }

    try {
      const response = await fetch(`/api/one-on-ones/${id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error('1on1記録の削除に失敗しました')
      }

      // メンバー詳細ページにリダイレクト
      router.push(`/members/${oneOnOne?.member.id}`)
      router.refresh()
    } catch (err) {
      setError(err instanceof Error ? err.message : 'エラーが発生しました')
    }
  }

  // AIアドバイスを生成
  const generateAiAdvice = async () => {
    if (!oneOnOne) return

    setAiLoading(true)
    setAiError(null)

    try {
      const response = await fetch('/api/ai/advice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          oneOnOneId: oneOnOne.id,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'AIアドバイスの生成に失敗しました')
      }

      const data = await response.json()
      
      // 更新されたデータでUIを更新
      setOneOnOne({
        ...oneOnOne,
        aiSummary: data.advice,
      })
    } catch (err) {
      setAiError(err instanceof Error ? err.message : 'AIアドバイスの生成に失敗しました')
    } finally {
      setAiLoading(false)
    }
  }

  // 質問リストを生成
  const generateQuestions = async () => {
    if (!oneOnOne) return

    setAiLoading(true)
    setAiError(null)

    try {
      const response = await fetch('/api/ai/questions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          oneOnOneId: oneOnOne.id,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '質問リストの生成に失敗しました')
      }

      const data = await response.json()
      
      // 新しいウィンドウでMarkdownを表示
      const newWindow = window.open('', '_blank')
      if (newWindow) {
        newWindow.document.write(`
          <html>
            <head>
              <title>次回1on1の質問リスト - ${oneOnOne.member.name}</title>
              <meta charset="utf-8">
              <style>
                body { font-family: sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
                pre { background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }
                h1, h2, h3 { margin-top: 1.5em; }
                ul { padding-left: 20px; }
              </style>
            </head>
            <body>
              <h1>次回1on1の質問リスト - ${oneOnOne.member.name}</h1>
              <div>${data.questions.replace(/\n/g, '<br>')}</div>
              <hr>
              <p><small>Generated by 1on1アシスタント</small></p>
            </body>
          </html>
        `)
      }
    } catch (err) {
      setAiError(err instanceof Error ? err.message : '質問リストの生成に失敗しました')
    } finally {
      setAiLoading(false)
    }
  }

  // マークダウンをHTMLに変換する簡易関数
  const renderMarkdown = (content: string) => {
    if (!content) return ''

    // 見出し
    let html = content
      .replace(/^# (.*?)$/gm, '<h1>$1</h1>')
      .replace(/^## (.*?)$/gm, '<h2>$1</h2>')
      .replace(/^### (.*?)$/gm, '<h3>$1</h3>')
      .replace(/^#### (.*?)$/gm, '<h4>$1</h4>')
      
    // リスト
    html = html.replace(/^\* (.*?)$/gm, '<li>$1</li>')
    html = html.replace(/^- (.*?)$/gm, '<li>$1</li>')
    html = html.replace(/^([0-9]+)\. (.*?)$/gm, '<li>$2</li>')
    
    // 連続したリストアイテムをulで囲む
    const regex = /<li>(.*?)<\/li>(\s*<li>.*?<\/li>)+/g
    let match
    while ((match = regex.exec(html)) !== null) {
      const matchedText = match[0]
      const replacement = `<ul>${matchedText}</ul>`
      html = html.replace(matchedText, replacement)
    }
    
    // 段落
    html = html.replace(/^(?!<[hua]|<li|<ul|<ol)(.+)$/gm, '<p>$1</p>')
    
    // 改行
    html = html.replace(/\n\n/g, '<br><br>')
    
    return html
  }

  if (isLoading) {
    return <div className="text-center py-4">読み込み中...</div>
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  if (!oneOnOne) {
    return (
      <Card className="animate-in">
        <CardHeader>
          <CardTitle className="text-lg sm:text-xl">1on1記録が見つかりません</CardTitle>
          <CardDescription className="text-sm">
            指定された1on1記録は存在しないか、削除された可能性があります。
          </CardDescription>
        </CardHeader>
        <CardFooter>
          <Button size="sm" asChild className="text-xs sm:text-sm transition-colors duration-200">
            <Link href="/members">メンバー一覧に戻る</Link>
          </Button>
        </CardFooter>
      </Card>
    )
  }

  return (
    <Card className="animate-in transition-all duration-300 dark:shadow-gray-900/20">
      <CardHeader>
        <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4 sm:gap-2">
          <div>
            <CardTitle className="text-lg sm:text-xl break-words">{oneOnOne.member.name} さんとの1on1</CardTitle>
            <CardDescription className="flex items-center mt-2 text-sm">
              <CalendarIcon className="w-4 h-4 mr-1" />
              {new Date(oneOnOne.date).toLocaleDateString('ja-JP')}
            </CardDescription>
          </div>
          <div className="flex flex-wrap gap-2">
            <Button size="sm" variant="outline" asChild className="text-xs sm:text-sm transition-colors duration-200">
              <Link href={`/one-on-ones/${id}/edit`}>編集</Link>
            </Button>
            <Button size="sm" variant="outline" asChild className="text-xs sm:text-sm transition-colors duration-200">
              <Link href={`/members/${oneOnOne.member.id}`}>メンバー詳細</Link>
            </Button>
            <Button size="sm" variant="destructive" onClick={handleDelete} className="text-xs sm:text-sm transition-colors duration-200">
              削除
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="animate-in" style={{ animationDelay: '50ms' }}>
          <h3 className="text-base sm:text-lg font-semibold mb-2">会話内容</h3>
          <div className="whitespace-pre-wrap text-sm sm:text-base bg-gray-50 dark:bg-gray-800 p-3 rounded-md shadow-sm">
            {oneOnOne.content}
          </div>
        </div>
        
        {oneOnOne.nextActions && (
          <div className="animate-in" style={{ animationDelay: '100ms' }}>
            <h3 className="text-base sm:text-lg font-semibold mb-2">次のアクション</h3>
            <div className="whitespace-pre-wrap text-sm sm:text-base bg-gray-50 dark:bg-gray-800 p-3 rounded-md shadow-sm">
              {oneOnOne.nextActions}
            </div>
          </div>
        )}
        
        {oneOnOne.aiSummary && (
          <div className="animate-in" style={{ animationDelay: '150ms' }}>
            <h3 className="text-base sm:text-lg font-semibold mb-2 flex items-center">
              <SparklesIcon className="w-4 h-4 mr-1 text-blue-500" />
              AIアドバイス
            </h3>
            <div 
              className="prose prose-sm sm:prose-base max-w-none bg-blue-50 dark:bg-blue-900/20 p-3 rounded-md shadow-sm"
              dangerouslySetInnerHTML={{ __html: renderMarkdown(oneOnOne.aiSummary) }} 
            />
          </div>
        )}
      </CardContent>
      <CardFooter className="flex flex-col sm:flex-row items-start gap-2">
        <Button 
          size="sm"
          variant="outline" 
          onClick={generateAiAdvice}
          disabled={aiLoading}
          className="w-full sm:w-auto text-xs sm:text-sm transition-colors duration-200 group"
        >
          {aiLoading ? (
            <>
              <LoaderIcon className="mr-2 h-4 w-4 animate-spin" />
              生成中...
            </>
          ) : (
            <>
              <SparklesIcon className="mr-2 h-4 w-4 group-hover:text-blue-500 transition-colors" />
              AIアドバイス生成
            </>
          )}
        </Button>
        
        <Button 
          size="sm"
          variant="outline" 
          onClick={generateQuestions}
          disabled={aiLoading}
          className="w-full sm:w-auto text-xs sm:text-sm transition-colors duration-200 group"
        >
          {aiLoading ? (
            <>
              <LoaderIcon className="mr-2 h-4 w-4 animate-spin" />
              生成中...
            </>
          ) : (
            <>
              <SparklesIcon className="mr-2 h-4 w-4 group-hover:text-blue-500 transition-colors" />
              次回の質問リスト生成
            </>
          )}
        </Button>
        
        {aiError && (
          <Alert variant="destructive" className="mt-4 animate-in">
            <AlertDescription>{aiError}</AlertDescription>
          </Alert>
        )}
      </CardFooter>
    </Card>
  )
} 